name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      docker-compose-version: ${{ steps.docker-compose-version.outputs.version }}
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Verificar versões do Docker e Docker Compose
      id: docker-compose-version
      run: |
        docker --version
        docker compose version || docker-compose version
        echo "::set-output name=version::$(docker compose version || docker-compose version)"

    - name: Configurar cache do ambiente virtual
      id: cache-venv
      uses: actions/cache@v3
      with:
        path: venv
        key: venv-${{ runner.os }}-${{ hashFiles('app/requirements.txt') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Criar e ativar ambiente virtual
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install virtualenv
        python3 -m venv venv
        venv/bin/pip install -r app/requirements.txt

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Construir a imagem Docker
      run: |
        cd app/
        docker compose -f docker-compose.yml build

  train:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Treinamento do Modelo
      run: |
        cd app/
        docker-compose run --rm airflow venv/bin/python train_model.py

  test:
    runs-on: ubuntu-latest
    needs: train
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Rodar os testes
      run: |
        cd app/
        docker-compose run --rm airflow venv/bin/pytest tests/test_bitcoin_pipeline.py

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Deploy para produção
      run: |
        docker-compose up -d