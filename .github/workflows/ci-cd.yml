name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Instalar Docker e Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        DOCKER_COMPOSE_VERSION=2.22.0
        sudo curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Construir a imagem Docker
      run: |
        cd app/
        docker-compose -f docker-compose.yml build

  train:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Configurar cache do ambiente virtual
      uses: actions/cache@v3
      with:
        path: venv
        key: venv-${{ runner.os }}-${{ hashFiles('app/requirements.txt') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Criar e ativar ambiente virtual
      run: |
        if [ ! -d "venv" ]; then
          python3 -m pip install --upgrade pip
          python3 -m pip install virtualenv
          python3 -m venv venv
          venv/bin/pip install -r app/requirements.txt
        fi

    - name: Treinamento do Modelo
      run: |
        cd app/
        docker-compose run --rm airflow venv/bin/python train_model.py

  test:
    runs-on: ubuntu-latest
    needs: train
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Restaurar cache do ambiente virtual
      uses: actions/cache@v3
      with:
        path: venv
        key: venv-${{ runner.os }}-${{ hashFiles('app/requirements.txt') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Rodar os testes
      run: |
        cd app/
        docker-compose run --rm airflow venv/bin/pytest tests/test_bitcoin_pipeline.py

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checar o código
      uses: actions/checkout@v2

    - name: Restaurar cache do ambiente virtual
      uses: actions/cache@v3
      with:
        path: venv
        key: venv-${{ runner.os }}-${{ hashFiles('app/requirements.txt') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Deploy para produção
      run: |
        docker-compose up -d
